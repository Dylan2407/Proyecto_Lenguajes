SET SERVEROUTPUT ON;

-- Verifica que no exista la tabla
DECLARE
    tabla VARCHAR2(31) := 'TBL_PROVEEDOR';
    tabla2 VARCHAR2(31) := 'TIPO_RESULTADO_PROVEEDOR';
    tabla3 VARCHAR2(31) := 'TABLA_RESULTADOS_PARA_PROVEEDOR';
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ' || tabla || ' CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TYPE ' || tabla2;
  EXECUTE IMMEDIATE 'DROP TYPE ' || tabla3 ;
  DBMS_OUTPUT.PUT_LINE('LA TABLA ' || tabla || ' FUE ENCONTRADA Y ELIMINADA EXITOSAMENTE');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('LA TABLA ' || tabla || ' NO EXISTE');
END;
/

-- Crea tabla proveedor
CREATE TABLE TBL_PROVEEDOR (
ID_PROVEEDOR NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
CEDULA_JURIDICA NUMBER NOT NULL,
NOMBRE VARCHAR(30) NOT NULL,
DIRECCION VARCHAR(50) NOT NULL,
TELEFONO NUMBER NOT NULL,
FECHA_DE_REGISTRO DATE NOT NULL,
CONSTRAINT UQ_CEDULA_JURIDICA UNIQUE(CEDULA_JURIDICA)
);

CREATE OR REPLACE PACKAGE pkg_proveedor_utilidades AS

    -- Procedimiento para insertar proveedor
    PROCEDURE sp_insertar_proveedor(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE,
        p_nombre TBL_PROVEEDOR.NOMBRE%TYPE,
        p_direccion TBL_PROVEEDOR.DIRECCION%TYPE,
        p_telefono TBL_PROVEEDOR.TELEFONO%TYPE,
        p_fecha_de_registro TBL_PROVEEDOR.FECHA_DE_REGISTRO%TYPE
    );

    -- Procedimiento para actualizar proveedor
    PROCEDURE sp_actualizar_proveedor(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE,
        p_nombre TBL_PROVEEDOR.NOMBRE%TYPE,
        p_direccion TBL_PROVEEDOR.DIRECCION%TYPE,
        p_telefono TBL_PROVEEDOR.TELEFONO%TYPE,
        p_fecha_de_registro TBL_PROVEEDOR.FECHA_DE_REGISTRO%TYPE
    );

    -- Procedimiento para eliminar proveedor
    PROCEDURE sp_eliminar_proveedor(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE
    );

    -- Procedimiento para leer proveedor por cédula jurídica
    PROCEDURE sp_leer_proveedores(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE
    );

END pkg_proveedor_utilidades;
/

CREATE OR REPLACE PACKAGE BODY pkg_proveedor_utilidades AS

    -- Implementación del procedimiento para insertar proveedor
    PROCEDURE sp_insertar_proveedor(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE,
        p_nombre TBL_PROVEEDOR.NOMBRE%TYPE,
        p_direccion TBL_PROVEEDOR.DIRECCION%TYPE,
        p_telefono TBL_PROVEEDOR.TELEFONO%TYPE,
        p_fecha_de_registro TBL_PROVEEDOR.FECHA_DE_REGISTRO%TYPE
    ) AS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO v_count
        FROM TBL_PROVEEDOR
        WHERE CEDULA_JURIDICA = p_cedula_juridica;

        IF v_count > 0 THEN
            DBMS_OUTPUT.PUT_LINE('YA EXISTE UN REGISTRO CON LA CEDULA JURIDICA ' || p_cedula_juridica);
        ELSE
            INSERT INTO TBL_PROVEEDOR(CEDULA_JURIDICA, NOMBRE, DIRECCION, TELEFONO, FECHA_DE_REGISTRO)
            VALUES (p_cedula_juridica, p_nombre, p_direccion, p_telefono, p_fecha_de_registro);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('REGISTRO REALIZADO');
        END IF;
    END sp_insertar_proveedor;

    -- Implementación del procedimiento para actualizar proveedor
    PROCEDURE sp_actualizar_proveedor(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE,
        p_nombre TBL_PROVEEDOR.NOMBRE%TYPE,
        p_direccion TBL_PROVEEDOR.DIRECCION%TYPE,
        p_telefono TBL_PROVEEDOR.TELEFONO%TYPE,
        p_fecha_de_registro TBL_PROVEEDOR.FECHA_DE_REGISTRO%TYPE
    ) AS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO v_count
        FROM TBL_PROVEEDOR
        WHERE CEDULA_JURIDICA = p_cedula_juridica;

        IF v_count > 0 THEN
            UPDATE TBL_PROVEEDOR
            SET NOMBRE = p_nombre,
                DIRECCION = p_direccion,
                TELEFONO = p_telefono,
                FECHA_DE_REGISTRO = p_fecha_de_registro
            WHERE CEDULA_JURIDICA = p_cedula_juridica;
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('EL PROVEEDOR CON LA CEDULA ' || p_cedula_juridica || ' HA SIDO ACTUALIZADO.');
        ELSE
            DBMS_OUTPUT.PUT_LINE('EL PROVEEDOR CON LA CEDULA ' || p_cedula_juridica || ' NO FUE ENCONTRADO.');
        END IF;
    END sp_actualizar_proveedor;

    -- Implementación del procedimiento para eliminar proveedor
    PROCEDURE sp_eliminar_proveedor(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE
    ) AS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO v_count
        FROM TBL_PROVEEDOR
        WHERE CEDULA_JURIDICA = p_cedula_juridica;

        IF v_count > 0 THEN
            DELETE FROM TBL_PROVEEDOR
            WHERE CEDULA_JURIDICA = p_cedula_juridica;
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('EL PROVEEDOR CON LA CEDULA ' || p_cedula_juridica || ' HA SIDO ELIMINADO.');
        ELSE
            DBMS_OUTPUT.PUT_LINE('EL PROVEEDOR CON LA CEDULA ' || p_cedula_juridica || ' NO FUE ENCONTRADO.');
        END IF;
    END sp_eliminar_proveedor;

    -- Implementación del procedimiento para leer proveedor por cédula jurídica
    PROCEDURE sp_leer_proveedores(
        p_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE
    ) IS
        v_cedula_juridica TBL_PROVEEDOR.CEDULA_JURIDICA%TYPE;
        v_nombre TBL_PROVEEDOR.NOMBRE%TYPE;
        v_direccion TBL_PROVEEDOR.DIRECCION%TYPE;
        v_telefono TBL_PROVEEDOR.TELEFONO%TYPE;
        v_fecha_de_registro TBL_PROVEEDOR.FECHA_DE_REGISTRO%TYPE;
    BEGIN
        SELECT CEDULA_JURIDICA, NOMBRE, DIRECCION, TELEFONO, FECHA_DE_REGISTRO
        INTO v_cedula_juridica, v_nombre, v_direccion, v_telefono, v_fecha_de_registro
        FROM TBL_PROVEEDOR
        WHERE CEDULA_JURIDICA = p_cedula_juridica;

        DBMS_OUTPUT.PUT_LINE('CEDULA JURIDICA: ' || v_cedula_juridica || 
                             ', NOMBRE: ' || v_nombre || 
                             ', DIRECCION: ' || v_direccion || 
                             ', TELEFONO: ' || v_telefono || 
                             ', FECHA DE REGISTRO: ' || v_fecha_de_registro);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('EL PROVEEDOR CON LA CEDULA ' || p_cedula_juridica || ' NO FUE ENCONTRADO.');
    END sp_leer_proveedores;

END pkg_proveedor_utilidades;
/





-- Inicia bloque de funciones

-- Declarando objeto  de tipo TYPE para manejar multiples resultados en la funcion de busqueda por fecha devolvera los datos del proveedor
/*https://stackoverflow.com/questions/56935878/return-multiple-values-from-oracle-function*/
CREATE OR REPLACE TYPE TIPO_RESULTADO_PROVEEDOR FORCE AS OBJECT (
    NOMBRE VARCHAR2(50),
    FECHA_DE_REGISTRO DATE
);
/

-- Crear el tipo de tabla para el objeto, esto permitirá manejar multiples resultados en la función de busqueda
CREATE OR REPLACE TYPE TABLA_RESULTADOS_PARA_PROVEEDOR AS TABLE OF TIPO_RESULTADO_PROVEEDOR;
/

-- Busca proveedores registrados desde una fecha deseada
CREATE OR REPLACE FUNCTION CONSULTAR_PROVEEDOR_POR_FECHA_DE_REGISTRO(FECHA_INGRESO_IN DATE)
RETURN TABLA_RESULTADOS_PARA_PROVEEDOR PIPELINED
IS
    v_found BOOLEAN := FALSE;
BEGIN
    -- Buscar el nombre del proveedor en la tabla de proveedores
    FOR R IN (
        SELECT P.NOMBRE, P.FECHA_DE_REGISTRO
        FROM TBL_PROVEEDOR P
        WHERE P.FECHA_DE_REGISTRO BETWEEN FECHA_INGRESO_IN AND SYSDATE
    ) LOOP
        PIPE ROW(TIPO_RESULTADO_PROVEEDOR(R.NOMBRE, R.FECHA_DE_REGISTRO));
        v_found := TRUE;
    END LOOP;
    IF NOT v_found THEN
        PIPE ROW(TIPO_RESULTADO_PROVEEDOR('ERROR CONSULTANDO LA FECHA', NULL));
    END IF;
    RETURN;
EXCEPTION
    WHEN OTHERS THEN
        PIPE ROW(TIPO_RESULTADO_PROVEEDOR('ERROR CONSULTANDO LA FECHA', NULL));
        RETURN;
END;
/


-- Insertar registros en la tabla de proveedores
EXEC pkg_proveedor_utilidades.SP_INSERTAR_PROVEEDOR(101234567, 'Proveedor Uno', 'Direccion 1', 22223333, TO_DATE('15-01-2020', 'DD-MM-YYYY'));
EXEC pkg_proveedor_utilidades.SP_INSERTAR_PROVEEDOR(102345678, 'Proveedor Dos', 'Direccion 2', 22224444, TO_DATE('20-02-2023', 'DD-MM-YYYY'));
EXEC pkg_proveedor_utilidades.SP_INSERTAR_PROVEEDOR(103456789, 'Proveedor Tres', 'Direccion 3', 22225555, TO_DATE('25-03-2015', 'DD-MM-YYYY'));
EXEC pkg_proveedor_utilidades.SP_INSERTAR_PROVEEDOR(104567890, 'Proveedor Cuatro', 'Direccion 4', 22226666, TO_DATE('30-04-2017', 'DD-MM-YYYY'));
EXEC pkg_proveedor_utilidades.SP_INSERTAR_PROVEEDOR(105678901, 'Proveedor Cinco', 'Direccion 5', 22227777, TO_DATE('10-05-2023', 'DD-MM-YYYY'));

-- Llamada a la función
SELECT NOMBRE, FECHA_DE_REGISTRO FROM TABLE(consultar_proveedor_por_fecha_de_registro(TO_DATE('20-01-21', 'DD-MM-YY')));



