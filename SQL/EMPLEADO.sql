-- Verifica que no exista la tabla
DECLARE
    tabla VARCHAR2(15) := 'TBL_EMPLEADO';
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ' || tabla;
  DBMS_OUTPUT.PUT_LINE('LA TABLA ' || tabla || ' FUE ENCONTRADA Y ELIMINADA EXITOSAMENTE');
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('LA TABLA ' || tabla || ' NO EXISTE');
END;
/

-- TABLA DE EMPLEADOS
CREATE TABLE TBL_EMPLEADO(
    ID_EMPLEADO NUMBER NOT NULL PRIMARY KEY,
    IDENTIFICACION NUMBER NOT NULL,
    NOMBRE VARCHAR(20) NOT NULL,
    APELLIDO VARCHAR(20) NOT NULL,
    SALARIO NUMBER(10,2) NOT NULL,
    ID_CLIENTE NUMBER,
    HORARIO DATE,
    CONSTRAINT FK_EMPLEADO_CLIENTE 
    FOREIGN KEY (ID_CLIENTE) 
    REFERENCES TBL_CLIENTE (ID_CLIENTE)
);

-- CRUD PARA LA TABLA DE EMPLEADOS
-- PROCEDIMIENTO PARA REGISTRAR EMPLEADOS
CREATE OR REPLACE PROCEDURE SP_INSERTAR_EMPLEADO(
    P_ID_EMPLEADO TBL_EMPLEADO.ID_EMPLEADO%TYPE,
    P_IDENTIFICACION TBL_EMPLEADO.IDENTIFICACION%TYPE,
    P_NOMBRE TBL_EMPLEADO.NOMBRE%TYPE,
    P_APELLIDO TBL_EMPLEADO.APELLIDO%TYPE,
    P_SALARIO TBL_EMPLEADO.SALARIO%TYPE,
    P_ID_CLIENTE TBL_EMPLEADO.ID_CLIENTE%TYPE,
    P_HORARIO TBL_EMPLEADO.HORARIO%TYPE
)AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM TBL_EMPLEADO
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;

    IF V_COUNT > 0 THEN
        DBMS_OUTPUT.PUT_LINE('YA EXISTE UN REGISTRO CON EL ID ' || P_ID_EMPLEADO);
    ELSE
        INSERT INTO TBL_EMPLEADO(ID_EMPLEADO,IDENTIFICACION,NOMBRE,APELLIDO,SALARIO,ID_CLIENTE,HORARIO)
        VALUES (P_ID_EMPLEADO,P_IDENTIFICACION,P_NOMBRE,P_APELLIDO,P_SALARIO,P_ID_CLIENTE,P_HORARIO);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('REGISTRO REALIZADO');
    END IF;
END;
/

-- PROCEDIMIENTO PARA LEER DATOS DE UN EMPLEADO
CREATE OR REPLACE PROCEDURE SP_LEER_EMPLEADO(
    P_ID_EMPLEADO NUMBER
)IS
    V_IDENTIFICACION TBL_EMPLEADO.IDENTIFICACION%TYPE;
    V_NOMBRE TBL_EMPLEADO.NOMBRE%TYPE;
    V_APELLIDO TBL_EMPLEADO.APELLIDO%TYPE;
    V_SALARIO TBL_EMPLEADO.SALARIO%TYPE;
    V_ID_CLIENTE TBL_EMPLEADO.ID_CLIENTE%TYPE;
    V_HORARIO TBL_EMPLEADO.HORARIO%TYPE;
BEGIN    
    SELECT IDENTIFICACION, NOMBRE, APELLIDO, SALARIO, ID_CLIENTE, HORARIO INTO V_IDENTIFICACION, V_NOMBRE, V_APELLIDO, V_SALARIO, V_ID_CLIENTE, V_HORARIO
    FROM TBL_EMPLEADO
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;
    
    DBMS_OUTPUT.PUT_LINE('IDENTIFICACION: ' || V_IDENTIFICACION || ', NOMBRE: ' || V_NOMBRE || ', APELLIDO: ' || V_APELLIDO || ', SALARIO: ' || V_SALARIO || ', ID_CLIENTE: ' || V_ID_CLIENTE || ', HORARIO: ' || V_HORARIO);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('EL EMPLEADO CON EL ID ' || P_ID_EMPLEADO || ' NO FUE ENCONTRADO.');
END;
/

-- PROCEDIMIENTO PARA ACTUALIZAR UN EMPLEADO
CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_EMPLEADO(
    P_ID_EMPLEADO TBL_EMPLEADO.ID_EMPLEADO%TYPE,
    P_IDENTIFICACION TBL_EMPLEADO.IDENTIFICACION%TYPE,
    P_NOMBRE TBL_EMPLEADO.NOMBRE%TYPE,
    P_APELLIDO TBL_EMPLEADO.APELLIDO%TYPE,
    P_SALARIO TBL_EMPLEADO.SALARIO%TYPE,
    P_ID_CLIENTE TBL_EMPLEADO.ID_CLIENTE%TYPE,
    P_HORARIO TBL_EMPLEADO.HORARIO%TYPE
)AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM TBL_EMPLEADO
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;

    IF V_COUNT > 0 THEN
        UPDATE TBL_EMPLEADO
        SET IDENTIFICACION = P_IDENTIFICACION, NOMBRE = P_NOMBRE, APELLIDO = P_APELLIDO, SALARIO = P_SALARIO, ID_CLIENTE = P_ID_CLIENTE, HORARIO = P_HORARIO
        WHERE ID_EMPLEADO = P_ID_EMPLEADO;
        COMMIT;

        DBMS_OUTPUT.PUT_LINE('EL EMPLEADO CON EL ID ' || P_ID_EMPLEADO || ' HA SIDO ACTUALIZADO.');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('EL EMPLEADO CON EL ID ' || P_ID_EMPLEADO || ' NO FUE ENCONTRADO.');
    END IF;
END;
/

-- PRECEDIMIENTO PARA ELIMINAR UN EMPLEADO
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_EMPLEADO(
    P_ID_EMPLEADO TBL_EMPLEADO.ID_EMPLEADO%TYPE
)AS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_COUNT
    FROM TBL_EMPLEADO
    WHERE ID_EMPLEADO = P_ID_EMPLEADO;

    IF V_COUNT > 0 THEN

        DELETE FROM TBL_EMPLEADO
        WHERE ID_EMPLEADO = P_ID_EMPLEADO;
        COMMIT;

        DBMS_OUTPUT.PUT_LINE('EL EMPLEADO CON EL ID ' || P_ID_EMPLEADO || ' FUE ELIMINADO CORRECTAMENTE.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EL EMPLEADO CON EL ID ' || P_ID_EMPLEADO || ' NO FUE ENCONTRADO.');
    END IF;
END;
/

--Inicia bloque funciones
--Busqueda de empleado por identificacion
CREATE OR REPLACE FUNCTION CONSULTAR_EMPLEADO_CON_IDENTIFICACION(IDENTIFICACION_IN NUMBER)
RETURN VARCHAR2
IS
    IDENTIFICACION TBL_EMPLEADO.IDENTIFICACION%TYPE;
    NOMBRE TBL_EMPLEADO.NOMBRE%TYPE;
BEGIN
    -- Buscar el nombre Y apellido del empleado en la tabla TBL_EMPLEADO tomando como parametro la identificacion
    SELECT E.IDENTIFICACION, E.NOMBRE || ' ' || E.APELLIDO
    INTO IDENTIFICACION, NOMBRE
    FROM TBL_EMPLEADO E
    WHERE IDENTIFICACION = IDENTIFICACION_IN;
    -- Retornar el resultado
    RETURN 'EL EMPLEADO CON LA IDENTIFICACION: ' || IDENTIFICACION || ' SE LLAMA: ' || NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'EL EMPLEADO CON LA IDENTIFICACION: ' || IDENTIFICACION || ' NO FUE ENCONTRADO';
    WHEN OTHERS THEN
        RETURN 'ERROR AL CONSULTAR LA IDENTIFICACION';
END;
/

--Busqueda de cliente por nombre
CREATE OR REPLACE FUNCTION CONSULTAR_CLIENTE_ASOCIADO_A_EMPLEADO(CEDULA_IN NUMBER)
RETURN VARCHAR2
IS
    NOMBRE TBL_EMPLEADO.NOMBRE%TYPE;
    NOMBRE_CLIENTE TBL_CLIENTE.NOMBRE%TYPE;
BEGIN
    -- Buscar el nombre del canton en la tabla TBL_CANTON
    SELECT E.NOMBRE || ' ' || E.APELLIDO "NOMBRE DEL EMPLEADO", C.NOMBRE || ' ' || C.APELLIDO "NOMBRE DEL CLIENTE ASIGNADO AL EMPLEADO"
    INTO NOMBRE, NOMBRE_CLIENTE
    FROM TBL_EMPLEADO E
    INNER JOIN TBL_CLIENTE C ON E.ID_CLIENTE = C.ID_CLIENTE
    WHERE REGEXP_LIKE(C.CEDULA, CEDULA_IN, 'i');
    -- Retornar el resultado
    RETURN 'EL CLIENTE CON CEDULA: ' || CEDULA_IN || ' FUE ENCONTRADO Y ESTA ASIGNADO AL EMPLEADO : ' || NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'EL CLIENTE CON CEDULA: ' || CEDULA_IN || ' NO FUE ENCONTRADO';
    WHEN OTHERS THEN
        RETURN 'ERROR AL CONSULTAR EL CLIENTE';
END;
/

--Busqueda de cliente asociado a empleado por nombre de cliente

--VISTA PARA LISTAR TODOS LOS EMPLEADOS POR NOMBRE, APELLIDO Y IDENTIFICACION
CREATE OR REPLACE VIEW VISTA_LISTAR_EMPLEADOS AS 
SELECT IDENTIFICACION || ' ' || Upper(NOMBRE) || ' ' || Upper(APELLIDO) "INFORMACION PERSONAL", HORARIO "HORARIO LABORAL" FROM TBL_EMPLEADO ORDER BY NOMBRE WITH READ ONLY;

--VISTA PARA VER LA CANTIDAD DE EMPLEADOS
CREATE OR REPLACE VIEW VISTA_CANTIDAD_DE_EMPLEADOS AS 
SELECT COUNT(IDENTIFICACION) "CANTIDAD DE EMPLEADOS" FROM TBL_EMPLEADO WITH READ ONLY;

-- Inserciones en la tabla TBL_EMPLEADO

-- Con registros en TBL_EMPLEADO con ID_CLIENTE de 1 a 5

-- Inserción 1
EXEC SP_INSERTAR_EMPLEADO(1, 123456789, 'Ana', 'García', 3000.00, 1, TO_DATE('2024-07-26', 'YYYY-MM-DD'));

-- Inserción 2
EXEC SP_INSERTAR_EMPLEADO(2, 987654321, 'Luis', 'Pérez', 3500.00, 2, TO_DATE('2024-07-26', 'YYYY-MM-DD'));

-- Inserción 3
EXEC SP_INSERTAR_EMPLEADO(3, 456123789, 'María', 'Rodríguez', 4000.00, 3, TO_DATE('2024-07-26', 'YYYY-MM-DD'));

-- Inserción 4
EXEC SP_INSERTAR_EMPLEADO(4, 321654987, 'Carlos', 'Mendoza', 3200.00, 4, TO_DATE('2024-07-26', 'YYYY-MM-DD'));

-- Inserción 5
EXEC SP_INSERTAR_EMPLEADO(5, 147258369, 'Lucía', 'Martínez', 2800.00, 5, TO_DATE('2024-07-26', 'YYYY-MM-DD'));

--Llamando vistas
SELECT "INFORMACION PERSONAL" FROM vista_listar_empleados;
SELECT "CANTIDAD DE EMPLEADOS" FROM vista_cantidad_de_empleados;

--Llamando funciones de empleado
SELECT CONSULTAR_EMPLEADO_CON_IDENTIFICACION(123456789) RESULTADO FROM DUAL;
SELECT CONSULTAR_CLIENTE_ASOCIADO_A_EMPLEADO(505050505) RESULTADO FROM DUAL;
